{"version":3,"sources":["randomchat/alert.mp3","randomchat/form.jsx","randomchat/chatHome.jsx","randomchat/router.jsx","index.js"],"names":["module","exports","Form","state","username","Paper","className","Typography","variant","gutterBottom","align","component","Grid","container","justify","alignItems","style","marginTop","item","xs","TextField","label","size","width","onChange","e","setState","target","value","props","setUsername","onKeyDown","keyCode","indexOf","history","push","sm","Button","color","disabled","this","onClick","Component","withRouter","ChatHome","typingTimer","connected","messages","activeMsg","roomId","connectedTo","emojiObj","emojiPickerOpen","isOtherTyping","componentDidMount","socket","io","randomNumber","Math","floor","random","emit","name","on","obj","firstPerson","o","msg","secondPerson","audioref","current","play","data","k","src","image","clearTimeout","setTimeout","componentDidUpdate","scrollIntoViewmsg","componentWillUnmount","sendMessage","handleImage","freader","FileReader","readAsDataURL","files","onload","event","result","connectOtherUser","isTyping","selectEmoji","emoji","handleEmojiPicker","chatboxRef","scrollIntoView","behavior","React","createRef","elevation","require","ref","height","direction","verticalAlign","paddingTop","overflowY","overflowX","position","map","index","padding","spacing","htmlFor","cursor","type","display","id","accept","autoFocus","placeholder","Hidden","xsDown","smUp","Fab","fontSize","Dialog","open","onClose","DialogContent","onEmojiClick","background","Routing","basename","window","location","pathname","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.947a7ce8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alert.9fd5812c.mp3\";","import React, { Component } from \"react\";\r\nimport { Paper, TextField, Button, Grid, Typography } from \"@material-ui/core\";\r\nimport \"./css/chat.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    username: \"\",\r\n  };\r\n  render() {\r\n    return (\r\n      <Paper className=\"form-paper\">\r\n        <Typography variant=\"h6\" gutterBottom align=\"center\">\r\n          Chat with random strangers\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\" gutterBottom>\r\n          Welcome to the Quickchatzz free Chat Roulette.You Must be 13+ to start\r\n          a random chat with stranger.\r\n          <br />\r\n          How to chat with strangers safely?\r\n          <br />\r\n          Don't share your personal information or contacts,don't send any money\r\n          to strangers.\r\n          <br />\r\n          Enjoy the Quickchatzz!\r\n          <br />\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n          style={{ marginTop: \"20px\" }}\r\n        >\r\n          <Grid item xs={9}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Username\"\r\n              size=\"small\"\r\n              style={{ width: \"100%\" }}\r\n              onChange={(e) => {\r\n                this.setState({ username: e.target.value });\r\n                this.props.setUsername(e.target.value);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (\r\n                  e.keyCode == 13 &&\r\n                  this.state.username !== \"\" &&\r\n                  this.state.username.indexOf(\" \") !== 0\r\n                ) {\r\n                  this.props.history.push(\"/room\");\r\n                }\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3} sm={2}>\r\n            <Button\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              disabled={\r\n                this.state.username == \"\" ||\r\n                this.state.username.indexOf(\" \") === 0\r\n              }\r\n              onClick={() => {\r\n                this.props.history.push(\"/room\");\r\n              }}\r\n            >\r\n              start\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Form);\r\n","import React, { Component } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  Typography,\r\n  Fab,\r\n  Hidden,\r\n  Avatar,\r\n  Dialog,\r\n  DialogContent,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport \"./css/chat.css\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport CameraAltIcon from \"@material-ui/icons/CameraAlt\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AOS from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\nimport Picker from \"emoji-picker-react\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass ChatHome extends Component {\r\n  typingTimer = null;\r\n  state = {\r\n    connected: false,\r\n    messages: [],\r\n    activeMsg: \"\",\r\n    username: \"\",\r\n    roomId: null,\r\n    connectedTo: \"some\",\r\n    emojiObj: null,\r\n    emojiPickerOpen: false,\r\n    isOtherTyping: false,\r\n  };\r\n\r\n  //to declare  the ref's\r\n  constructor(props) {\r\n    super(props);\r\n    this.chatboxRef = new React.createRef();\r\n    this.audioref = new React.createRef();\r\n  }\r\n\r\n  //when component mounts\r\n  componentDidMount = () => {\r\n    this.setState({ username: this.props.username });\r\n    this.socket = io(\"https://random-chat-by-node.herokuapp.com/\"); //https://random-chat-by-node.herokuapp.com/\r\n    var randomNumber = Math.floor(Math.random() * 1000000);\r\n    //emit when a user joins the site\r\n    this.socket.emit(\"user-joined\", {\r\n      name: this.props.username,\r\n      randomNumber: randomNumber,\r\n    });\r\n    //when a user connects to other user\r\n    this.socket.on(\"connected-to-user\", (obj) => {\r\n      var messages = this.state.messages;\r\n      if (obj.firstPerson === this.props.username) {\r\n        var o = {\r\n          msg: \"Connected\",\r\n          name: obj.secondPerson,\r\n        };\r\n        messages.push(o);\r\n        this.setState({ connectedTo: obj.secondPerson });\r\n      } else {\r\n        var o = {\r\n          msg: \"Connected\",\r\n          name: obj.firstPerson,\r\n        };\r\n        messages.push(o);\r\n        this.setState({ connectedTo: obj.firstPerson });\r\n      }\r\n      this.setState({ connected: true, messages, roomId: obj.roomId });\r\n    });\r\n\r\n    // recieve msgs when other users send message\r\n    this.socket.on(\"add-message\", (msg) => {\r\n      var messages = this.state.messages;\r\n      messages.push({\r\n        name: this.state.connectedTo,\r\n        msg: msg,\r\n      });\r\n      this.setState({ messages });\r\n      this.audioref.current.play();\r\n    });\r\n\r\n    //when other user sends image\r\n    this.socket.on(\"add-image\", (data) => {\r\n      var k = {\r\n        name: data.name,\r\n        msg: \"image\",\r\n        src: data.image,\r\n      };\r\n      var messages = this.state.messages;\r\n      messages.push(k);\r\n      this.setState({ messages });\r\n    });\r\n    //when other user disconnects\r\n    this.socket.on(\"disconnected\", () => {\r\n      if (this.state.connectedTo !== null) {\r\n        var messages = this.state.messages;\r\n        messages.push({\r\n          name: this.state.connectedTo,\r\n          msg: \"left\",\r\n        });\r\n        this.setState({ messages, connectedTo: null });\r\n      }\r\n    });\r\n\r\n    //when other user starts typing\r\n    this.socket.on(\"is-typing\", () => {\r\n      this.setState({ isOtherTyping: true });\r\n      clearTimeout(this.typingTimer);\r\n      this.typingTimer = setTimeout(() => {\r\n        this.setState({ isOtherTyping: false });\r\n      }, 500);\r\n    });\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    this.scrollIntoViewmsg();\r\n  };\r\n\r\n  //disconnect user when pushed to back\r\n  componentWillUnmount = () => {\r\n    this.socket.emit(\"disconnected-force\", this.state.username);\r\n  };\r\n  //send message\r\n  sendMessage = () => {\r\n    if (\r\n      this.state.activeMsg !== \"\" &&\r\n      this.state.activeMsg.indexOf(\" \") !== \"\"\r\n    ) {\r\n      this.scrollIntoViewmsg();\r\n      var messages = this.state.messages;\r\n      var o = {\r\n        name: \"You\",\r\n        msg: this.state.activeMsg,\r\n      };\r\n      messages.push(o);\r\n      this.setState({ messages });\r\n      //send the message to the other user\r\n      this.socket.emit(\"send-message\", {\r\n        msg: this.state.activeMsg,\r\n        roomId: this.state.roomId,\r\n      });\r\n      this.setState({ activeMsg: \"\" });\r\n    }\r\n  };\r\n\r\n  //hendle the file changed\r\n  handleImage = (e) => {\r\n    var freader = new FileReader();\r\n    freader.readAsDataURL(e.target.files[0]);\r\n    freader.onload = (event) => {\r\n      this.setState({ src: event.target.result });\r\n      var k = {\r\n        name: \"You\",\r\n        msg: \"image\",\r\n        src: event.target.result,\r\n      };\r\n      var messages = this.state.messages;\r\n      messages.push(k);\r\n      this.setState({ messages });\r\n      this.socket.emit(\"user-image\", {\r\n        name: this.props.username,\r\n        image: event.target.result,\r\n      });\r\n    };\r\n  };\r\n\r\n  //connect to other user\r\n  connectOtherUser = () => {\r\n    this.setState({ connected: false, connectedTo: \"some\", messages: [] });\r\n    var randomNumber = Math.floor(Math.random() * 1000000);\r\n    this.socket.emit(\"user-joined\", {\r\n      name: this.props.username,\r\n      randomNumber: randomNumber,\r\n    });\r\n  };\r\n\r\n  //send message to other user when typing\r\n  isTyping = (e) => {\r\n    if (e.target.value !== \"\" && e.target.value.indexOf(\" \") !== 0) {\r\n      this.socket.emit(\"user-typing\");\r\n    }\r\n  };\r\n\r\n  //add Emoji to the text\r\n  selectEmoji = (e, emojiObj) => {\r\n    var activeMsg = this.state.activeMsg;\r\n    activeMsg = activeMsg + emojiObj.emoji;\r\n    this.setState({ activeMsg });\r\n  };\r\n\r\n  //handle emoji picker\r\n  handleEmojiPicker = () => {\r\n    this.setState({ emojiPickerOpen: !this.state.emojiPickerOpen });\r\n  };\r\n\r\n  //scroll the msgs list to last message\r\n  scrollIntoViewmsg = () => {\r\n    this.chatboxRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Paper className=\"chat-paper\" elevation={3}>\r\n        <audio src={require(\"./alert.mp3\")} ref={this.audioref} />\r\n        <Grid\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n          direction=\"column\"\r\n        >\r\n          <Grid\r\n            item\r\n            className=\"chat-nav\"\r\n            xs={12}\r\n            style={{ height: \"10%\", verticalAlign: \"middle\" }}\r\n          >\r\n            <Typography\r\n              variant=\"body1\"\r\n              align=\"center\"\r\n              style={{\r\n                color: \"white\",\r\n                paddingTop: \"12px\",\r\n              }}\r\n            >\r\n              Random Chat\r\n            </Typography>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            style={{\r\n              overflowY: \"scroll\",\r\n              overflowX: \"hidden\",\r\n              height: \"80%\",\r\n              position: \"relative\",\r\n            }}\r\n          >\r\n            {!this.state.connected && (\r\n              <div style={{ position: \"absolute\" }} className=\"waiting-text\">\r\n                <Typography variant=\"body1\">\r\n                  Waiting for a stranger to connect\r\n                  <div className=\"waiting-dots one\"></div>\r\n                  <div className=\"waiting-dots two\"></div>\r\n                  <div className=\"waiting-dots three\"></div>\r\n                </Typography>\r\n              </div>\r\n            )}\r\n            {this.state.messages.map((e, index) => {\r\n              if (e.msg === \"Connected\") {\r\n                return (\r\n                  <div className=\"joined-msg\">\r\n                    {e.msg} to {e.name},say Hi!\r\n                  </div>\r\n                );\r\n              } else if (e.msg === \"left\") {\r\n                return (\r\n                  <div className=\"joined-msg\">\r\n                    {e.name} has {e.msg}\r\n                  </div>\r\n                );\r\n              } else if (e.msg == \"image\" && e.name == \"You\") {\r\n                return (\r\n                  <div className=\"image-by-admin\">\r\n                    <img src={e.src} />\r\n                  </div>\r\n                );\r\n              } else if (e.msg == \"image\" && e.name != \"You\") {\r\n                return (\r\n                  <div className=\"image-by-other\">\r\n                    <div className=\"sender-name\">\r\n                      <Typography variant=\"body2\">{e.name}</Typography>{\" \"}\r\n                    </div>\r\n                    <img src={e.src} />\r\n                  </div>\r\n                );\r\n              } else if (e.name == \"You\") {\r\n                return (\r\n                  <div className=\"msg-by-admin\">\r\n                    <Typography variant=\"body2\">{e.msg}</Typography>\r\n                  </div>\r\n                );\r\n              } else {\r\n                return (\r\n                  <div className=\"msg-by-other\">\r\n                    <div className=\"sender-name\">\r\n                      <Typography variant=\"body2\">{e.name}</Typography>{\" \"}\r\n                    </div>\r\n\r\n                    <Typography variant=\"body2\">{e.msg}</Typography>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n            {this.state.isOtherTyping && (\r\n              <div className=\"other-typing\">\r\n                <Typography variant=\"body1\">\r\n                  {\" \"}\r\n                  {this.state.connectedTo} is typing{\" \"}\r\n                  <div className=\"dots-anim one\"></div>\r\n                  <div className=\"dots-anim two\"></div>\r\n                  <div className=\"dots-anim three\"></div>\r\n                </Typography>\r\n              </div>\r\n            )}\r\n            <div style={{ width: \"100%\" }} ref={this.chatboxRef}></div>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            style={{ height: \"12%\", padding: \"0px 6px\", paddingTop: \"10px\" }}\r\n          >\r\n            {this.state.connectedTo == null ? (\r\n              <Grid item container xs={12} justify=\"flex-end\">\r\n                <Grid item xs={3} sm={2}>\r\n                  <Button\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    onClick={() => {\r\n                      this.props.history.push(\"/\");\r\n                    }}\r\n                  >\r\n                    Home\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item xs={6} sm={4}>\r\n                  <Button\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    onClick={this.connectOtherUser}\r\n                  >\r\n                    Go to Next stranger\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            ) : (\r\n              <Grid\r\n                item\r\n                container\r\n                xs={12}\r\n                justify=\"space-between\"\r\n                alignItems=\"center\"\r\n                spacing={2}\r\n                className=\"bottom-grid\"\r\n              >\r\n                <Grid item xs={1}>\r\n                  <label htmlFor=\"myInput\">\r\n                    <CameraAltIcon\r\n                      style={{\r\n                        color: \"white\",\r\n                        cursor: \"pointer\",\r\n                        marginTop: \"4px\",\r\n                      }}\r\n                      size=\"small\"\r\n                      className=\"camera-icon\"\r\n                    />\r\n                  </label>\r\n                  <input\r\n                    type=\"file\"\r\n                    style={{ display: \"none\" }}\r\n                    id=\"myInput\"\r\n                    onChange={this.handleImage}\r\n                    accept=\"image/*\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={9} style={{ position: \"relative\" }}>\r\n                  <EmojiEmotionsIcon\r\n                    size=\"small\"\r\n                    className=\"emoji-icon\"\r\n                    style={{ position: \"absolute\" }}\r\n                    onClick={this.handleEmojiPicker}\r\n                  />\r\n                  <input\r\n                    autoFocus\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Message..\"\r\n                    value={this.state.activeMsg}\r\n                    onChange={(e) => {\r\n                      this.setState({ activeMsg: e.target.value });\r\n                      this.isTyping(e);\r\n                    }}\r\n                    onKeyDown={(e) => {\r\n                      if (e.keyCode == 13) {\r\n                        this.sendMessage();\r\n                      }\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2} sm={2}>\r\n                  <Hidden xsDown>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      variant=\"contained\"\r\n                      onClick={this.sendMessage}\r\n                    >\r\n                      Send\r\n                    </Button>\r\n                  </Hidden>\r\n                  <Hidden smUp>\r\n                    <Fab\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                      style={{ width: \"35px\", height: \"20px\" }}\r\n                      onClick={this.sendMessage}\r\n                    >\r\n                      <SendIcon style={{ fontSize: \"0.9rem\" }} color=\"white\" />\r\n                    </Fab>\r\n                  </Hidden>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Dialog\r\n          open={this.state.emojiPickerOpen}\r\n          onClose={this.handleEmojiPicker}\r\n        >\r\n          <DialogContent>\r\n            <div className=\"emoji-picker-div\">\r\n              <Picker\r\n                onEmojiClick={this.selectEmoji}\r\n                className=\"picker\"\r\n                style={{ background: \"green\" }}\r\n              />\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(ChatHome);\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Form from \"./form\";\r\nimport ChatHome from \"./chatHome\";\r\n\r\nclass Routing extends Component {\r\n  state = {\r\n    username: \"\",\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router basename={window.location.pathname || \"\"}>\r\n        <Route path=\"/\" exact>\r\n          <Form\r\n            setUsername={(username) => {\r\n              this.setState({ username: username });\r\n            }}\r\n          />\r\n        </Route>\r\n        <Route path=\"/room\" exact>\r\n          <ChatHome username={this.state.username} />\r\n        </Route>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routing;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Routing from \"./randomchat/router\";\r\nReactDOM.render(<Routing />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}